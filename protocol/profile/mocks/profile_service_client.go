// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	profile "github.com/distuurbia/profile/protocol/profile"
)

// ProfileServiceClient is an autogenerated mock type for the ProfileServiceClient type
type ProfileServiceClient struct {
	mock.Mock
}

// AddRefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) AddRefreshToken(ctx context.Context, in *profile.AddRefreshTokenRequest, opts ...grpc.CallOption) (*profile.AddRefreshTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *profile.AddRefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.AddRefreshTokenRequest, ...grpc.CallOption) (*profile.AddRefreshTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.AddRefreshTokenRequest, ...grpc.CallOption) *profile.AddRefreshTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.AddRefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.AddRefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateProfile(ctx context.Context, in *profile.CreateProfileRequest, opts ...grpc.CallOption) (*profile.CreateProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *profile.CreateProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateProfileRequest, ...grpc.CallOption) (*profile.CreateProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateProfileRequest, ...grpc.CallOption) *profile.CreateProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CreateProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CreateProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteProfile(ctx context.Context, in *profile.DeleteProfileRequest, opts ...grpc.CallOption) (*profile.DeleteProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *profile.DeleteProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteProfileRequest, ...grpc.CallOption) (*profile.DeleteProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteProfileRequest, ...grpc.CallOption) *profile.DeleteProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.DeleteProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.DeleteProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordAndIDByUsername provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetPasswordAndIDByUsername(ctx context.Context, in *profile.GetPasswordAndIDByUsernameRequest, opts ...grpc.CallOption) (*profile.GetPasswordAndIDByUsernameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *profile.GetPasswordAndIDByUsernameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetPasswordAndIDByUsernameRequest, ...grpc.CallOption) (*profile.GetPasswordAndIDByUsernameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetPasswordAndIDByUsernameRequest, ...grpc.CallOption) *profile.GetPasswordAndIDByUsernameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetPasswordAndIDByUsernameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetPasswordAndIDByUsernameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshTokenByID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetRefreshTokenByID(ctx context.Context, in *profile.GetRefreshTokenByIDRequest, opts ...grpc.CallOption) (*profile.GetRefreshTokenByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *profile.GetRefreshTokenByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetRefreshTokenByIDRequest, ...grpc.CallOption) (*profile.GetRefreshTokenByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetRefreshTokenByIDRequest, ...grpc.CallOption) *profile.GetRefreshTokenByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetRefreshTokenByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetRefreshTokenByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProfileServiceClient creates a new instance of ProfileServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileServiceClient {
	mock := &ProfileServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
